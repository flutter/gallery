on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Build and create release
jobs:
  create-release:
    name: Create draft release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Create release.
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Flutter Gallery ${{ github.ref }}
        draft: true
        prerelease: false
  ubuntu-build:
    name: Build application on Ubuntu
    runs-on: ubuntu-latest
    needs: create-release
    steps:
    # Set up Flutter and add it to the path.
    - name: Clone Flutter repository with master channel.
      uses: actions/checkout@v2
      with:
        repository: 'flutter/flutter'
        ref: 'master'
        path: 'flutter'
        fetch-depth: 0
    - name: Add Flutter to the PATH for Unix.
      run: echo "::add-path::$GITHUB_WORKSPACE/flutter/bin"
    - name: Run Flutter doctor.
      run: flutter doctor -v
    - name: Install Linux dependencies.
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libx11-dev pkg-config cmake ninja-build
    - name: Enable desktop support.
      run: flutter config --enable-linux-desktop

    # Clone the Gallery repository under `code`, to avoid conflicts with `flutter`.
    - name: Clone the Gallery repository.
      uses: actions/checkout@v2
      with:
        path: 'code'
    - name: Get packages for the Flutter project.
      run: flutter pub get
      working-directory: code

    # Build the application for desktop.
    - name: Build project # This would actually build your project, using zip for an example artifact
      run: zip --junk-paths my-artifact README.md
    - name: Upload Release Asset
      id: upload_release_asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./my-artifact.zip
        asset_name: my-artifact.zip
        asset_content_type: application/zip