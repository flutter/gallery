name: Draft Flutter Gallery Release
on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
jobs:
  create-release:
    name: Create draft release
    runs-on: ubuntu-18.04
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
    - name: Create draft release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Flutter Gallery ${{ github.ref }}
        draft: true
        prerelease: false
  build:
    name: Build application
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        target: [macos, windows, linux, apk, web]
        include:
        - os: macos-10.15
          target: macos
          path: build/macos/Build/Products/Release
        - os: windows-2019
          target: windows
          path: build\windows\runner\Release
        - os: ubuntu-18.04
          target: linux
          path: build/linux/release/bundle
        - os: ubuntu-18.04
          target: apk
          path: build/app/outputs/apk/release/
        - os: ubuntu-18.04
          target: web
      # Disable fail-fast as we want results from all even if one fails.
      fail-fast: false
    needs: create-release
    steps:
    # Set up Flutter and add it to the path.
    - name: Clone Flutter repository with master channel
      uses: actions/checkout@v2
      with:
        repository: 'flutter/flutter'
        ref: 'master'
        path: 'flutter'
        fetch-depth: 0
    - name: Add Flutter to the PATH for Linux and macOS
      if: startsWith(matrix.os, 'macOS') || startsWith(matrix.os, 'ubuntu')
      run: echo "::add-path::$GITHUB_WORKSPACE/flutter/bin"
    - name: Add Flutter to the PATH for Windows
      if: startsWith(matrix.os, 'windows')
      run: echo "::add-path::${env:GITHUB_WORKSPACE}\flutter\bin"
    - name: Install Linux dependencies
      if: matrix.target == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libx11-dev pkg-config cmake ninja-build libblkid-dev
    - name: Install Android dependencies
      if: matrix.target == 'apk'
      uses: actions/setup-java@v1
      with:
        java-version: '12.x'
    - name: Install web dependencies
      if: matrix.target == 'web'
      uses: actions/setup-node@v1
      with:
        node-version: '12'
    - name: Enable desktop and web support
      run: |
        flutter config --enable-web
        flutter config --enable-linux-desktop
        flutter config --enable-macos-desktop
        flutter config --enable-windows-desktop
    - name: Run Flutter doctor
      run: flutter doctor -v

    # Clone the Gallery repository under `code`, to avoid conflicts with `flutter`.
    - name: Clone the Gallery repository
      uses: actions/checkout@v2
      with:
        path: 'code'
    - name: Get packages for the Flutter project
      run: flutter pub get
      working-directory: code

    # Build the application for desktop.
    - name: Build project
      run: |
        flutter create .
        flutter build -v ${{ matrix.target }} --release
      working-directory: code
    - name: Deploy to Firebase
      if: matrix.target == 'web'
      run: |
        npm install -g firebase-tools
        firebase deploy -P staging
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      working-directory: code
    - name: Copy VC redistributables to release directory
      if: matrix.target == 'windows'
      run: |
        Copy-Item (vswhere -find 'VC\Redist\MSVC\14.27.29016\x64\Microsoft.VC142.CRT\msvcp140.dll') .
        Copy-Item (vswhere -find 'VC\Redist\MSVC\14.27.29016\x64\Microsoft.VC142.CRT\vcruntime140.dll') .
        Copy-Item (vswhere -find 'VC\Redist\MSVC\14.27.29016\x64\Microsoft.VC142.CRT\vcruntime140_1.dll') .
      working-directory: code\${{ matrix.path }}
    - name: Compress build for Linux and macOS
      if: matrix.target == 'macos' || matrix.target == 'linux'
      run: zip -r $GITHUB_WORKSPACE/flutter_gallery_${{ matrix.target }} .
      working-directory: code/${{ matrix.path }}
    - name: Compress build for Windows
      if: matrix.target == 'windows'
      run: compress-archive -Path * -DestinationPath ${env:GITHUB_WORKSPACE}\flutter_gallery_${{ matrix.target }}.zip
      working-directory: code\${{ matrix.path }}
    - name: Upload release asset
      if: matrix.target == 'windows' || matrix.target == 'macos' || matrix.target == 'linux'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./flutter_gallery_${{ matrix.target }}.zip
        asset_name: flutter_gallery_${{ matrix.target }}.zip
        asset_content_type: application/zip
